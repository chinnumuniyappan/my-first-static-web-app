@page "/fetchdata"
@using BlazorApp.Shared 
@inject System.Net.Http.HttpClient HttpClient
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.Net.Http.Json;

<h1>Weather forecast</h1>

<button class="btn btn-primary" @onclick="@GeneratePDF">Generate PDF</button>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts = new WeatherForecast[]{};

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            //forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[]{};
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
@functions{
    async void GeneratePDF()
    {
        string data = await HttpClient.GetStringAsync("/api/WeatherForecast");
        JS.SaveAs("Sample.pdf", Convert.FromBase64String(data));
    }
}
